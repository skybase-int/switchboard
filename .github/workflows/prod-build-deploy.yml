name: Build and deploy app (prod)

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: false

on:
  workflow_dispatch: # on button click
    inputs:
      skip_build:
        description: 'Skip build?'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - deployments/makerdao

env:
  APP_NAME: switchboard
  API_APP_NAME: switchboard-api
  FRONTEND_APP_NAME: switchboard-frontend
  CLUSTER_NAME: ${{ secrets.PROD_CLUSTER_NAME }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.PROD_AWS_REGION }}.amazonaws.com
  API_ECR_REPO_NAME: switchboard-api-prod
  FRONTEND_ECR_REPO_NAME: switchboard-frontend-prod
  ENV: prod

jobs:
  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.get_commit_hash.outputs.short_sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get commit hash
        id: get_commit_hash
        shell: bash
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-api:
    name: Build image for api
    runs-on: ubuntu-latest
    needs:
      - setup
    if: always() && !cancelled() && !failure() && !github.event.inputs.skip_build && !contains(github.event.head_commit.message, '[skip build]')

    steps:
      - name: Checkout all files
        id: checkout
        uses: actions/checkout@v4

      - name: Build, tag, and push image to ECR
        id: build_image
        uses: ./.github/actions/build
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.API_ECR_REPO_NAME }}
          SHA_TAG: ${{ needs.setup.outputs.short_sha }}
          BUILD_CONTEXT: ./api

  build-frontend:
    name: Build image for frontend
    runs-on: ubuntu-latest
    needs:
      - setup
    if: always() && !cancelled() && !failure() && !github.event.inputs.skip_build && !contains(github.event.head_commit.message, '[skip build]')

    steps:
      - name: Checkout all files
        id: checkout
        uses: actions/checkout@v4

      - name: Build, tag, and push image to ECR
        id: build_image
        uses: ./.github/actions/build
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.FRONTEND_ECR_REPO_NAME }}
          SHA_TAG: ${{ needs.setup.outputs.short_sha }}
          BUILD_CONTEXT: ./frontend

  deploy-api:
    name: Deploy image for api
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-api
    if: always() && !cancelled() && !failure() && !contains(github.event.head_commit.message , '[skip deploy]')
    env:
      HELM_VALUES: deploy/values_api.yml

    steps:
      - name: Checkout actions
        id: checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          sparse-checkout: |
            .github

      - name: Deploy image to EKS
        id: deploy_image
        uses: ./.github/actions/deploy
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.API_ECR_REPO_NAME }}
          APP_NAME: ${{ env.API_APP_NAME }}
          NAMESPACE: ${{ env.APP_NAME }}
          HELM_VALUES: ${{ env.HELM_VALUES }}
          IMAGE_TAG: ${{ ( contains(github.event.head_commit.message, '[skip build]') || github.event.inputs.skip_build ) && 'latest' || needs.setup.outputs.short_sha }} # If the build was skipped, use the `latest` image
          SENTRY_ENV: ${{ env.ENV }}
          AUTOSCALING_MAX_REPLICAS: 4

  deploy-frontend:
    name: Deploy image for frontend
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-frontend
    if: always() && !cancelled() && !failure() && !contains(github.event.head_commit.message , '[skip deploy]')
    env:
      HELM_VALUES: deploy/values_frontend.yml

    steps:
      - name: Checkout actions
        id: checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          sparse-checkout: |
            .github

      - name: Deploy image to EKS
        id: deploy_image
        uses: ./.github/actions/deploy
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ env.FRONTEND_ECR_REPO_NAME }}
          APP_NAME: ${{ env.FRONTEND_APP_NAME }}
          NAMESPACE: ${{ env.APP_NAME }}
          HELM_VALUES: ${{ env.HELM_VALUES }}
          IMAGE_TAG: ${{ ( contains(github.event.head_commit.message, '[skip build]') || github.event.inputs.skip_build ) && 'latest' || needs.setup.outputs.short_sha }} # If the build was skipped, use the `latest` image
          AUTOSCALING_MAX_REPLICAS: 4
